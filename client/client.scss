@import 'base';

.fadeOut :is(icon, pages > *, navbar) {
  animation: fadeIn .2s ease-in reverse forwards;
}

.fadeLogo a.logo > div {
  clip-path: polygon(30% 9%, 31% 33%, 36% 47%, 48% 50%, 49% 66%, 50% 100%, 19% 99%, 20% 10%);
}
// header {&::after,&::before {  content: "";  display: block;  position: fixed;  top: 7vh;  right: 2vw;  width: 5vh;  height: 5vh;  background-color: #0000;  border: #0000 .7vh solid;  border-radius: 50%;   transition: border-color .5s ease, clip-path .5s ease,opacity .5s .2s ease;}&::after {  content: "âœ”";  border-color: $green;  color: $green;  font-size: 5vh;  display: grid;  place-content: center;  opacity: 0;}&[noSpin]::after {  right: -99vw;}&:not([loading])::after {  animation: 1s loadingEnd linear;}&::before {  animation: 1s loadingSpin linear infinite;}&[loading]::before {  border-color: $color5;}}

body[loading] * {
  cursor: progress !important;
}
@keyframes loadingSpin {
  from {
    transform: rotate(50deg);
    clip-path: polygon(50% 50%,50% 0%,0% 0%,0% 100%);
  }

  50% {
    clip-path: polygon(50% 50%,50% 0%,0% 0%,0% 30%);
  }

  to {
    transform: rotate(410deg);
    clip-path: polygon(50% 50%,50% 0%,0% 0%,0% 100%);
  }
}
@keyframes loadingEnd {
  50%,
  70% {
    opacity: 1;
  }

  from,
  to {
    opacity: 0;
  }
}
@keyframes CtD {
  from {
    color: var(--uclr, $color7);
  }
}
@mixin blockElement {
  background-color: $color2;
  min-height: 2rem;
  width: 100%;
  box-sizing: border-box;
  border-radius: .6rem;
  display: block;
  font-size: 1.5rem;
  padding: 1rem .5rem;
  margin: .6rem 0;
  /* cursor: pointer; */
  //
  // transform-style: preserve-3d;
  // > * {
  //   transform: translateZ(4px) scale(0.96);
  //   box-shadow: 0 0 .3rem #000;
  // }
}
@mixin wdth {
  width: max(calc(1.2px * var(--wdth,0) + 1ch),2ch);
}
@mixin actionButton {
  // .edit,.remove deprecated - new = edit,remove
  float: right;
  height: 2rem;
  width: 5rem;
  display: inline-block;
  margin: 0 1rem;
  border-radius: .5rem;
  overflow: hidden;
  cursor: pointer;
}
@mixin dashedInput {
  border-radius: .2em;
  border: dashed #0000 .2em;
  margin: -.2em;
  color: $yellowish !important;

  &:is(:hover, :focus) {
    border-color: $color5;
  }
}
@mixin columnList {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}
@mixin TagNmHov {
  color: $color7;
  animation: CtD .3s ease-out;
  user-select: all;

  &::after {
    content: unset;
    // opacity: 0;position: fixed;top: -99vh;font-size: .875rem;
  }
}
@mixin TagNmDef {
  color: #0000;
  position: relative;
  white-space: nowrap;
  user-select: none;

  &::after {
    content: attr(nm);
    color: var(--uclr, $color7);
    position: absolute;
    left: 0;
  }
}
@mixin sorterSelect {
  padding: 3rem 2% 2% !important;
  // width: 97.5%;
  &::before {
    content: '';
    background: url('/src/icon/sort');
    position: absolute;
    width: 2rem;
    height: 2rem;
    background-size: 2rem;
    top: .5rem;
    right: 8.7ch;
    transform: scaleX(-1);
    filter:brightness(0) saturate(100%) invert(52%) sepia(7%) saturate(374%) hue-rotate(180deg) brightness(87%) contrast(88%);
  }
}
@mixin exOnHover {
  &:hover::after {
    content: '+';
    transform: rotate(45deg);
    transform-origin: bottom;
    font-size: 2em;
    text-align: center;
    position: absolute;
    height: 50%;
    bottom: .5em;
    right: -.3ch;
    color: $red;
  }
}
@mixin ttlPopup {
  content: attr(ttl);
  position: absolute;
  font-size: .7rem;
  padding: .5em;
  border-radius: .2em .5em .5em .5em;
  top: calc(100% + 1em);
  left: 50%;
  height: fit-content;
  background: $color1;
  color: $color7;
  pointer-events: none;
  z-index: 3;
  max-width: 100%;
  width: fit-content;
  white-space: pre-line;
  opacity: 0;
  transition: opacity .3s ease-in .3s;
}

[ttl] {
  position: relative;

  &::before {
    @include ttlPopup;
  }

  &:hover::before {
    opacity: 1;
  }
}

y {
  color: $yellowish;
  margin: 0 .8ch;
  font-weight: 600;
}

navbar {
  position: absolute;
  right: calc(25vh + 12vw);
  display: flex;
  height: 4vh;
  flex-grow: 1;
  width: calc(86vw - 30vh);

  > a {
    flex-grow: 1;
    height: 4.5vh;
    text-align: center;

    &:is(:hover, :focus) {
      background-color: $color2;
      /* filter: unset */
    }

    > img {
      width: 4.5vh;
      animation: fadeIn .5s ease-out;
    }
  }
}

header > .srvr {
  position: fixed;
  right: 2vw;
  top: 7vh;
  background-color: $color1;
  color: $color6;
  padding: 1em 3ch;
  border-radius: 1em 0 1em 1em;
  box-shadow: #000 .4vw .4vh 2vh -0.5em;
  font-size: .7rem;
  text-align: center;
  transform: scale(0);
  transform-origin: 150% 0;
  animation: 1s slideIn 2s ease-out forwards;

  > x {
    position: absolute;
    top: .4rem;
    right: 1ch;
    cursor: pointer;
    width: 1rem;
    height: 1rem;

    &::after {
      content: '+';
      transform: rotate(45deg);
      transform-origin: bottom;
      font-size: 2rem;
      position: absolute;
      bottom: .3em;
      left: 0;
      text-align: center;
      height: 100%;
      pointer-events: none;
    }
  }

  > a {
    background-color: $accent1;
    color: $color1;
    font-size: 2em;
    display: block;
    padding: .1em 1ch;
    border-radius: .5em;
    margin-top: .2em;
    text-decoration: none;

    &:hover {
      color: #000;
      background-color: $accent2;
    }
  }
}
@keyframes slideIn {
  to {
    transform: scale(1);
  }
}

select {
  font-size: .83rem;
}

pages {
  width: 100vw;
  height: 95vh;
  position: fixed;
  bottom: 0;
  left: 0;
  display: grid;
  grid-template-columns: repeat(5, 100vw);
  grid-template-rows: 100vh;
  scroll-snap-type: x mandatory;
  overflow-x: scroll;
  overflow-y: hidden;
  color: $white;
  /* display: block; */
  animation: fadeIn .5s ease-out;
  scroll-behavior: smooth;
}

page {
  width: 80vw;
  height: 95vh;
  scroll-snap-stop: always;
  scroll-snap-align: start;
  scroll-snap-type: y mandatory;
  padding: 0 10vw;
  display: inline-block;
  overflow-y: auto;
  // perspective: 100px;
  > h1 {
    font-size: 2em;
    text-transform: uppercase;
    display: block;
    margin-top: 1em;
    margin-left: -1vw;
    height: 1.5em;

    &::after {
      content: '';
      width: 100%;
      border-bottom: .1vh $color6 solid;
      margin-top: .3em;
      display: block;
    }
  }
}
@keyframes logListEntry {
  0% {
    margin-bottom: -3em;
  }

  10% {
    margin-bottom: 0;
  }

  80% {
    opacity: 1;
  }

  to {
    opacity: 0;
  }
}

.loadlist {
  // display: none;
  display: flex;
  flex-direction: column-reverse;
  flex-wrap: nowrap;
  // align-content: center;
  justify-content: flex-start;
  height: 95vh;
  position: fixed;
  bottom: 0;
  left: .3em;
  width: 20vw;
  z-index: 5;
  pointer-events: none;

  .entry {
    animation: logListEntry 3s forwards ease;
    background: var(--clr, $DCblue);
    padding: .5em 1ch;
    border-radius: .4em;
    margin-top: .5em;
    text-align: center;
    width: fit-content;
    height: fit-content;
    box-shadow: .2ch .5em 1em 0 #0004;

    > span {
      display: block;
      text-align: start;
    }
  }
}

:is(.displayPrefix, [prefix], #commands rule > h1)::before {
  content: var(--prefix, "$");
}

newrule {
  // newrule deprecated - remove whole rule
  font-size: 2.5em;
  background-color: $color2;
  height: 6vh;
  min-width: 21vw;
  border-radius: .6rem;
  display: inline-block;
  padding: 2rem .5rem;
  margin: 1rem;
  cursor: pointer;

  > * {
    text-transform: capitalize;
  }
}
// create,
// logsettings,
// modsettings,
// rule,
// suggestions,
// suggestsettings,
// transcripts,

commandSettings,
setprefix,
ticketsettings {
  @include blockElement;
}

empty {
  font-weight: bolder;
  font-size: 1.5rem;

  &:only-child::before {
    content: 'This guild doesn\'t have any ';
  }
}

#commands empty:only-child::after {
  content: 'Custom Commands';
}

#voice empty:only-child::after {
  content: 'Voice Channels';
}

#moderation empty:not(modlog~*)::before {
  content: 'No Moderation Logs found';
}

create {
  @include blockElement;
  margin-bottom: 2rem;
  cursor: pointer;
  position: relative;
  margin-bottom: calc(2rem + 1px * var(--height, 0));
  // color: #0000;
  // &::before {content: '+';}
  &:hover {
    background-color: $color3;
  }

  > editrule {
    background-color: $color2;
  }
}

rule {
  @include blockElement;
  box-sizing: content-box;
  position: relative;
  width: calc(100% - 1rem);
  height: 2rem;
  margin-bottom: calc(0.6rem + 1px * var(--height, 0));
  transition: margin-bottom .1s ease-out;

  > :is(h1, h2) {
    text-overflow: ellipsis;
    overflow: hidden;
    display: inline-block;
    white-space: nowrap;
  }

  > h1 {
    font-size: .7em;
    // transition: max-width .4s ease-out .4s;
  }

  > h2 {
    margin-left: 2ch;
    font-size: .5em;
    color: $color6;
    position: absolute;
    bottom: .8rem;
    left: 1ch;
    max-width: calc(100% - 65ch);
  }
}

#commands editrule::before {
  content: var(--prefix, "$");
  position: absolute;
  z-index: 1;
  left: 1.2ch;
}

editrule {
  width: inherit;
  box-sizing: border-box;
  display: block;
  position: absolute;
  font-size: 1rem;
  top: 3.5rem;
  padding: .5rem 0 0 1ch;
  left: 0;
  background-color: inherit;
  z-index: 1;
  border-radius: 0 0 .6rem .6rem;
  border-top: .1vh $color5 solid;

  > .command:first-child {
    text-transform: lowercase;
    height: 1.5em;
    font-size: 1.05rem;
    border-radius: .2em;
    border: dashed #0000 .2em;
    margin: -.2em 0;
    padding-left: 1ch;
    background: $color4;
    // cursor: text;
    &:is(:hover, :focus) {
      border-color: $color4;
    }
  }

  > h5 {
    color: $white;
    font-weight: bolder;
    font-size: 1rem;
  }

  > .roles {
    margin-bottom: 1em;
  }

  .addrole:only-child::after,
  > .roles > * {
    position: relative;
    background: $color4;
    color: var(--clr,$color7);
    display: inline-block;
    margin-right: 1ch;
    padding: .1em 1ch;
    white-space: nowrap;
    border-radius: .2em;
    cursor: pointer;
  }

  .addrole {
    margin-right: 2ch;

    &:hover {
      background: mix($color4, $blue, 90%);
    }

    &::before {
      content: 'Add Role';
    }

    &:only-child::after {
      content: '@everyone';
      position: absolute;
      left: calc(100% + 2ch);
      // pointer-events: none;
    }
  }

  .role {
    padding: .1em 2ch .1em 1ch;
    @include exOnHover;

    &:hover {
      background: mix($color4, $red, 90%);
    }
  }

  > .set {
    font-size: 1.5em;
    margin: -2em 1em;
  }

  > .embedtoggle {
    font-size: 1rem;
    display: block;
    position: absolute;
    width: 2em;
    height: 2em;
    top: 2em;
    right: 1.5em;
    appearance: none;
    background: $color5;
    border-radius: .1em;

    &::after {
      content: '';
      display: block;
      background: $accent1;
      border-radius: .2em;
      width: 2em;
      height: 2em;
      transition: transform .3s $bounce;
      transform: scale(0);
    }

    &:checked::after {
      transform: scale(.8);
    }

    &::before {
      content: 'Embed';
      position: absolute;
      top: -1em;
      color: $white;
      font-weight: bolder;
      text-align: center;
      width: 4em;
      left: -1em;
    }
  }

  .content {
    font-size: 1rem;
    margin: 1em 0;
    resize: none;
    width: calc(72vw - 4rem); //72vw = 90% of 80vw
    height: calc(1px*var(--height,1));
    line-height: 1.2;
    background: $color4;
    border-radius: .2em;
    color: $color7;
    position: relative;
  }

  > :is(input, textarea) {}

  &:not([embed]) > .embed {
    background: 0;
    border: 0;
    padding: 0;

    > :not(.content, .image) {
      display: none;
    }

    > .image {
      position: relative;

      &::after {
        content: attr(counter);
        position: absolute;
        width: 0;
        top: -2.1rem;
        left: calc(72vw - 4.5rem);
        color: $color6;
        direction: rtl;
        white-space: nowrap;
      }
    }
  }

  &[embed] {
    > .embed {
      width: min(520px,calc(72vw - 4rem));
      margin: 1em 1ch;
      position: relative;
      font-size: 1rem;

      > input {
        height: 1.2em;
      }

      > :is(.content, input) {
        // margin: .7rem 0;
        // font-size: 1rem;
        margin: .5em 0;
        background: $color4;
        border-radius: .2em;
        color: $color7;
        width: 80%;
      }
    }

    .color {
      position: absolute;
      left: 105%;
      top: 1.75rem;

      &::before {
        content: 'Color';
        display: block;
        position: absolute;
        color: $white;
        font-weight: bolder;
        font-size: 1rem;
        width: 5ch;
        text-align: center;
        top: -1em;
        left: -0.625ch;
      }
    }

    .urlInput {
      font-size: 1rem;
      position: absolute;
      top: calc(100% + 2em);
      left: -10ch;
      height: 2em;
      width: 40ch;
      z-index: 2;

      > * {
        display: inline-block;
        border-radius: .2em;
        height: 100%;
      }

      > input {
        background: $color6;
        width: 100%;
        color: $white;
        padding-left: 1ch;

        &:invalid {
          background: mix($color5, $red, 90%);
        }

        &::placeholder {
          color: $color7;
        }
      }

      > .set {
        width: 2.5em;
        font-size: 1em;
        padding-top: .5rem;
        box-sizing: border-box;
        position: absolute;
        right: -3.6em;
      }

      > .remove {
        text-align: center;
        display: inline-block;
        width: 2.5em;
        font-size: 1em;
        padding-top: .5rem;
        box-sizing: border-box;
        position: absolute;
        left: -2.6em;
        background: $red;

        &::before {
          content: 'Ã—';
        }
      }
    }

    .img {
      position: absolute;
      cursor: pointer;
      background: var(--img, $color5);
      background-size: contain;
      background-repeat: no-repeat;
    }

    .authorimg {
      width: 1.25rem;
      height: 1.25rem;
      top: 1vh;
      border-radius: 50%;
    }

    .thumbnail {
      width: 5rem;
      height: 5rem;
      top: 1vh;
      right: 2vh;
    }

    .image {
      max-width: 80%;
      min-width: 6rem;
      min-height: 6rem;
      position: relative;
    }

    .footerimg {
      width: 1.125rem;
      height: 1.125rem;
      margin-bottom: -1.125rem;
      border-radius: .15rem;
      display: inline-block;
      position: relative;
      top: .8em;
    }

    .footer {
      left: 1.75em;
      width: calc(80% - 1.75em) !important;
    }

    .author {
      left: 1.69em;
      top: -.375em;
      width: calc(80% - 1.69em) !important;
    }

    .title {
      font-size: .875em;
    }
  }
}
//editrule
// edit,
// label,
// remove
// :is(.edit, edit, .remove, remove) {

:is(edit, remove) {
  @include actionButton;
  padding: 0 1ch;
  width: fit-content;
  text-align: center;
  border: $blue .1rem solid;
}
// :is(.remove, remove) {

remove {
  // .remove deprecated - new = remove
  border-color: $red;
  width: 8ch;

  &:hover {
    border-color: lighten($red,5%);
    background: mix($color3, $red, 90%);
  }

  &::before {
    content: 'REMOVE';
  }

  &[sure]::before {
    content: 'SURE?';
  }
}

edit {
  // .edit deprecated - new = edit
  // border: $blue .1rem solid;
  &:hover {
    border-color: lighten($blue, 5%);
    background: mix($color3, $blue, 90%);
  }

  &::before {
    content: 'EDIT';
  }
}

label {
  @include actionButton;

  > input {
    opacity: 0;
    width: 0;
    height: 0;
  }

  > div {
    cursor: pointer;
    width: inherit;
    height: 2rem;
    -webkit-transition: .4s;
    transition: .4s;

    &:after,
    &:before {
      background-color: $accent1;
      /* position: absolute; */
      content: 'ON';
      color: $color5;
      text-align: center;
      width: 0;
      height: inherit;
      transition: width .4s;
      overflow: hidden;
      border-radius: .5rem;
      overflow: hidden;
      float: left;
      margin-top: -2rem;
    }

    &:before {
      margin-left: 0;
      margin-top: 0;
      background-color: $color5;
      color: $accent1;
      content: 'OFF';
      width: inherit;
    }
  }

  > input:checked+div:after {
    width: inherit;
  }
}

form {
  // form deprecated - remove whole rule
  width: 80vw;
  padding: 10vh 5vw 5vh;
  left: 5vw;
  min-height: 78vh;
  border-radius: 2vh;
  position: absolute;
  top: 6vh;
  background-color: $color2;
  z-index: 11;
  cursor: default;

  &::after {
    content: '';
    position: fixed;
    height: 5vh;
    width: 100vw;
    top: 0;
    left: 0;
    right: 0;
    z-index: 3;
  }

  &.displayprefix::before {
    background-color: $color3;
    height: 3.9vh;
    display: inline-block;
    border-radius: .5rem 0 0 .5rem;
    padding: 0 .5rem;
    line-height: 2.2;
    border-right: 1px $color5 solid;
    cursor: text;
  }

  > h1 {
    position: absolute;
    top: 4vh;
  }

  &.displayprefix > input:first-of-type {
    border-radius: 0 .5vh .5vh 0;
  }

  > textarea {
    background-color: $color3;
    border: 0;
    height: 12vh;
    width: 100%;
    border-radius: .5vh;
    color: $color7;
    padding: .5vw;
    display: block;
    min-height: 2em;
    max-width: 100%;
    min-width: 2.6rem;
    margin-bottom: 3vh;
  }

  > button {
    position: absolute;
    bottom: 2vh;
    right: 5vw;
    height: 3vh;
    width: 6vw;
    background-color: $accent1;
    cursor: pointer;
    border-radius: .3vh;
    text-transform: capitalize;

    &.add {
      &:is(:focus, :hover) {
        background-color: $accent2;
      }
    }

    &.cancel {
      color: $color7;
      right: 13vw;
      background-color: $color3;

      &:is(:focus, :hover) {
        background-color: $color5;
      }
    }
  }

  > h6 {
    font-size: 1.2em;
    /* margin-top: 1.2em; */
    > i code {
      font-size: 1.2em;
    }
  }
}

:is(form, ticketsettings) h6 > i {
  font-style: normal;
  font-size: .7rem;
  margin-left: 3ch;
}
// :is(commandSettings, ticketSettings) input:not([type*=c]),editrule > input:not([type^=c], [type^=r]),

input:not([type^=c], [type^=r], :is(suggestsettings, setprefix, modsettings) *),
select {
  background-color: $color3;
  height: 4vh;
  width: max(20ch,20%);
  border-radius: .5vh;
  color: $color7;
  padding-left: 2ch;
  margin-bottom: 3vh;
  cursor: pointer;
}

[type="text"],
input:not([type]) {
  cursor: text;
}

input[type="range"] {
  appearance: none;
  width: max(25ch, 60%);
  background-color: $color5;
  height: .7em;
  padding-left: 0;
  margin: .5em 0 1.5rem;
  cursor: pointer;
  position: relative;
  border-radius: .2em;

  &::before {
    content: '';
    width: .5%;
    height: 1em;
    left: 50.25%;
    background-color: $color5;
    display: block;
    position: absolute;
    z-index: -1;
  }

  &::after {
    content: attr(shw);
    left: 102%;
    display: block;
    position: absolute;
    color: $color7;
    font-weight: bold;
    font-size: 1rem;
    text-transform: capitalize;
  }

  &::-webkit-slider-thumb {
    appearance: none;
    background-color: $accent2;
    width: 1.3ch;
    height: 1.7em;
  }
}

input.saveOption {
  width: 23ch;
  margin-top: 1.6em;

  &::before {
    content: 'Save transcript:';
    color: $color7;
    // font-weight: bold;
    font-size: 1rem;
    width: fit-content;
    height: 1em;
    left: 0;
    background-color: unset;
    z-index: auto;
    top: -1.4em;
  }

  &::after {
    left: 13ch;
    top: -1.4em;
  }

  &:is([shw^=Al], [shw^=N])+.embed:not(:focus-within) {
    filter: opacity(.4);
    transition: filter 1s ease-out 1s;
  }

  &+.embed {
    transition: filter .2s ease-out;
  }
}

.datalistRoles {
  border-radius: .5vh;
  min-height: 4vh;
  width: 100%;
  background-color: $color3;
  padding: .1px;
  color: $color7;
}

.addedRole {
  // addedRole deprecated - remove whole rule
  display: inline-block;
  height: 3vh;
  border-radius: 1.5vh;
  margin: .5vh;
  border: $color5 .1vh solid;
  background-color: $color3;
  white-space: nowrap;
  text-overflow: ellipsis;

  > div {
    margin-top: -.8vh;
    margin-left: .5ch;
    font-size: 1rem;
  }

  &:hover .x {
    opacity: 1;
  }
}

.plus,
.x {
  width: 1.5vh;
  height: 1.5vh;
  border-radius: 50%;
  margin: 1.25vh .5vh;
  border: $color5 .1vh solid;
  cursor: pointer;
  line-height: .7;
  font-size: 1.3rem;
  text-align: center;
  display: inline-block;
}

.x {
  transform: translateY(.2vh) rotate(45deg);
  opacity: 0;
  color: $DCred;
}

.listSelector {
  position: absolute;
  margin-top: 1vh;
  overflow-x: hidden;
  text-overflow: ellipsis;
  width: 20vw;
  background-color: $color5;
  border-radius: .5vh;
  max-height: 30vh;
  display: flex;
  flex-direction: column;
  flex-wrap: nowrap;
  justify-content: flex-start;

  > div {
    border-bottom: .1vh $color6 solid;
    height: 2em;
    line-height: 1.5;
    text-align: left;
    padding-left: 1ch;
    position: relative;
    color: var(--clr,$color7);

    &:hover {
      background-color: $color6;
    }
    // &::after {
    //   content: attr(id);
    //   position: absolute;
    //   font-size: .7em;
    //   color: $color6;
    //   bottom: .1em;
    //   right: 1ch;
    // }
  }
}
// .UserLimitDisplay {
//   display: inline-block;
//   width: 2ch;
//   text-align: center;
//   font-size: 1em;
//   margin-left: 1ch;
// }

setPrefix > input {
  background-color: $color3;
  height: 2rem;
  width: 10ch;
  border-radius: .5rem;
  color: $white;
  padding-left: 2ch;
}

.set {
  background-color: $accent1;
  color: $color5;
  text-align: center;
  cursor: pointer;
  width: 5rem;
  height: 2rem;
  display: inline-block;
  float: right;
  border-radius: .5rem;
  margin-right: 1rem;

  &::before {
    content: 'SET';
  }
}

body > .surePopup {
  position: fixed;
  width: 30vw;
  height: 20vh;
  line-height: 20vh;
  top: 40vh;
  left: 35vw;
  background-color: $color1;
  border-radius: 2vh;
  text-align: center;
  box-shadow: 1vh 1vh 2vh .1vh #000;

  > div {
    position: absolute;
    bottom: 1vh;
    height: 2rem;
    width: 5rem;
    line-height: 1;
    border-radius: .5rem;
    font-size: 1.5rem;
    line-height: 1.25;
    background-color: $accent1;
    color: $color5;
    right: 2vw;
    cursor: pointer;

    &:first-of-type {
      left: 2vw;
      background-color: $color3;
    }
  }
}

i.info {
  width: .6rem;
  height: .6rem;
  border-radius: 50%;
  display: inline-block;
  text-decoration: none;
  border: .1vh $color5 solid;
  position: relative;
  bottom: .4rem;
  left: .3ch;
  margin-left: 0;

  &:hover {
    border-color: $color6;

    > div {
      display: block;
    }

    .embed {
      //Maybe gone - if so: remove rainbowBorder
      width: max(min(60%, 10ch), 25%);
      height: 1.5em;
      margin-top: 1em;
      border-color: $accent1;
      animation: 5s linear 1s infinite rainbowBorder;
    }
  }

  &::before {
    content: 'i';
    font-size: .6rem;
    margin-left: .6ch;
    color: $color7;
    // font-style: italic;
  }

  &.t::before {
    content: 't';
  }

  > div {
    display: none;
    position: relative;
    left: .6rem;
    font-style: normal;
    z-index: 3;

    > div {
      padding: 1em 2ch;
      border-radius: 2ch;
      border-top-left-radius: 0;
      background-color: $color1;
      position: absolute;
      width: intrinsic;
      width: -moz-max-content;
      width: max-content;
      max-width: 25vw;
      text-decoration: none;
      font-size: .8rem;
    }
  }
}
@keyframes rainbowBorder {
  0% {
    border-color: hsl(46, 84%, 46%);
  }

  20% {
    border-color: hsl(118, 84%, 35%);
  }

  40% {
    border-color: hsl(190, 84%, 42%);
  }

  60% {
    border-color: hsl(262, 84%, 64%);
  }

  80% {
    border-color: hsl(334, 84%, 40%);
  }
}

:is(ticketsettings, suggestsettings) {
  > div {
    display: none;
    padding-bottom: 5rem;

    > :nth-last-child(2) {
      margin-bottom: 0;
    }
  }

  &[show] > div {
    display: block;
  }

  > h5 {
    font-size: 1em;
  }

  h6 {
    font-size: .7em;
  }

  :is(.advanced > h6, h6:first-of-type) {
    margin-top: 3vh;
  }

  .set {
    margin-top: 3rem;
  }

  .advanced {
    // height: 3vh;overflow-y: hidden;
    width: 100%;
    top: 5vh;
    position: relative;
    // &[show] {height: auto;overflow-y: auto;}
    > h5 {
      display: none;
      // height: 1.3em;width: 90%;padding-left: 1%;&:hover {  background-color: $color3;}&::before {  position: absolute;  content: "Advanced Settings";  top: 0;}&::after {  top: .65em;  left: 18ch;  position: absolute;  content: "";  width: calc(90% - 18ch);  height: .1vh;  background-color: $color6;}
    }
    // > *:not(h5) {display: none;}
    // &[show] > *:not(h5) {display: block;}
    // > :nth-child(2) {margin-top: 3vh;}
  }

  .toggle {
    float: none;
    margin: .7vh 0 3vh;
  }
}

.embed {
  background-color: $color3;
  width: min(520px, 80%);
  padding: 1vh 2vh 2vh;
  display: flex;
  flex-direction: column;
  border-radius: .25rem;
  border-left: .25rem $accent1 solid;
  font-family: Whitney, 'Helvetica Neue', Helvetica, Arial, sans-serif;
  box-sizing: border-box;

  > .author {
    font-size: .875rem;
    font-weight: 600;
    margin-bottom: .5rem;
    position: relative;
  }

  > :is(.content, [type="text"]) {
    font-size: .875rem;
    line-height: 1.125rem;
    font-weight: 400;
    white-space: pre-line;
  }

  > .footer {
    font-size: .75rem;
    line-height: 1rem;
    font-weight: 500;
    position: relative;
    top: .7em;
  }
}

.color,
.embed > .reaction {
  position: relative;
  top: 3.3rem;
  left: -2vh;
  padding: .125rem .375rem;
  font-size: 1rem;
  color: $color6;
  background-color: $color3;
  width: 2.5ch;
  border-radius: .25rem;
  height: 1.5em;
  margin-top: -1.75em;
  cursor: pointer;
}

.color {
  left: 3ch;
  cursor: auto;

  > input {
    cursor: pointer;
    width: 100%;
    height: 100%;
    transform: scale(2);
    clip-path: circle(20%);
    background: none;
  }
}

.emojiSelector {
  position: relative;
  overflow: hidden;
  background-color: $color1;
  border-radius: .6rem;
  border-top-left-radius: 0;
  left: 2ch;
  top: .2em;
  z-index: 1;
  opacity: 0;
  pointer-events: none;
  width: 21rem;
  height: 15rem;

  > div {
    overflow-y: scroll;
    width: 95%;
    height: calc(82% - 2rem);
    margin: 0 .5rem;
    padding-top: 2%;
    padding-bottom: 2rem;
    gap: .1rem;
    cursor: auto;
    display: flex;
    flex-wrap: wrap;
    justify-content: space-around;
    align-items: flex-start;
    align-content: flex-start;

    > div {
      width: 2.2rem;
      height: 2.2rem;
      background-color: $color2;
      border-radius: .6rem;
      line-height: 2;
      text-align: center;
      cursor: pointer;
      user-select: none;
      overflow: hidden;

      &:hover > .title {
        opacity: 1;
      }

      &[hide] {
        display: none;
      }
    }
  }

  img {
    object-fit: contain;
    width: 96%;
    height: 96%;
  }

  .title {
    font-size: 1.2rem;
    position: absolute;
    height: 2em;
    padding-top: .2rem;
    width: 100%;
    background-color: $color1;
    color: $white;
    bottom: 0;
    left: 0;
    text-align: center;
    border-radius: 0 0 .2rem .2rem;
    opacity: 0;
    transition: .1s .5s opacity ease-in;
    line-height: 1.5;
  }
  // img {
  //   max-width: 100%;
  //   max-height: 100%;
  //   object-fit: contain;
  // }
  > input:not(p) {
    width: 100%;
    border-radius: 0;
    margin-bottom: 0;
    font-size: 1rem;
    height: 15%;
  }
}

.guildIcon {
  position: fixed;
  bottom: 1vh;
  right: 2vw;
  height: 40vh;
  width: 40vh;
  opacity: .08;
  filter: blur(.1vh);
  pointer-events: none;
  z-index: -1;
  background-size: cover;
}

logsettings {
  @include blockElement;

  > .color {
    top: 0;
    left: 0;
    margin: 0;
    padding: 0;
    overflow: hidden;
    width: 16vw;
    height: 4vh;
    margin-bottom: 3vh;

    > input {
      width: 120%;
      transform: unset;
      clip-path: polygon(5% 22%,78% 22%,78% 78%,5% 78%);
    }
  }

  > .set {
    margin-top: -4rem;
    float: unset !important;
    margin-left: 2%;
  }

  > .color+.set {
    margin-left: 22%;
  }

  > h6 {
    &:first-child {
      display: inline-block;
      font-size: 1.5rem;
      margin-bottom: 3vh;
    }

    &:nth-of-type(3) {
      position: relative;
      top: 1em;
      margin-bottom: 2em;
    }
  }
  // > label:not(:first-of-type) {
  > label:nth-of-type(2) {
    float: none;
    margin-left: 2%;
  }

  > .audit {
    position: relative;
    left: max(11ch,20%);
    top: -1.34em;

    +label+h6 {
      float: right;
    };
  }
}

:is(.commandList, .logList, suggestions) {
  display: flex;
  flex-wrap: wrap;
  padding: 0 2%;
  gap: 2.5%;
  // flex-direction: row;
  // justify-content: flex-start;
  // align-items: flex-start;
  // align-content: flex-start;
  > :is(div, suggestion) {
    // .logItem
    min-width: calc(14ch + 5rem);
    flex: 1;
    margin-top: 1%;
    padding: .3rem .3ch;
    border-radius: .4rem;
    background-color: $color3;
    position: relative;
    height: fit-content;
  }

  :is(label, .set) {
    position: absolute;
    right: -1.6ch;
    top: 0;
    transform: scale(.75);
  }

  h3 {
    font-size: .8rem;
    color: $color5;
    margin: -.5em 0 .5em 1ch;
  }
}

:is(.commandList, .logList) {
  details {
    font-size: 1rem;
    color: $color7;
  }

  summary {
    user-select: none;
    cursor: pointer;

    &:hover::marker {
      color: $color6;
    }
  }
}
// :is(.comsetting, .commandList)

.argel {
  background: rgba($discord, .77);
  border-radius: .2em;
  padding: .1em;
  cursor: pointer;
  color: $color7;

  &::after {
    content: attr(arg);
  }

  &+span {
    margin-left: 1ch;
  }

  &:hover {
    background: $discord;

    > span {
      opacity: 1;
    }

    &::after {
      color: $color7;
    }
  }

  > span {
    @include ttlPopup;
    top: 95%;
    left: unset;
    max-width: 70%;
  }
  // &[optional]::before {content: '?';}
}
// :is(.comsetting, .commandList, .logList) input:not([type="checkbox"]) {

:is(.commandList, .logList) > div > input {
  font-size: inherit;
  padding-left: 0;
  margin-bottom: 0;
  color: $white;
  width: calc(94% - 3.7rem);
  // background-color: #0000;
  &:is(:focus, :hover) {
    background-color: $color2;
  }
}

.logList h1 {
  font-size: inherit;
  text-transform: capitalize;
}

suggestsettings {
  @include blockElement;

  .embeds {
    display: flex;
    flex-wrap: wrap;
    padding: 0 2%;
    gap: 2.5%;
    align-items: baseline;
  }

  .embed {
    margin-top: 3.5em;

    &.pending {
      margin-top: 1.5em;
    }

    &::before {
      content: attr(status);
      color: $color6;
      position: absolute;
      top: -1.2em;
      font-size: 1.3rem;
    }
    @for $i from 1 through 4 {
      &:nth-child(#{$i}) > .author::before {
        // background: url("https://discordapp.com/assets/#{nth($DiscordPicsList, $i)}.png");
        background: DiscordPic($i);
      }
    }
  }

  .embed > .reaction {
    left: 3.25ch;
    // &:hover::before {content: "Upvote";position: absolute;transform: rotate(60deg);color: $color6;top:1.7em;}
    &:last-child {
      left: 8.5ch;
      // &:hover::before {content: "Downvote";}
    }
  }

  input.statusname {
    @include wdth;
    @include dashedInput;
    position: relative;
    top: -1.1em;
    left: max(calc(1.2px * var(--titlewdth,0) + 1ch),2ch);
    margin-bottom: -2em;
  }

  input.title {
    @include dashedInput;
    width: max(calc(1.2px * var(--titlewdth,0) + 1ch),2ch);
  }

  b {
    > span {
      display: block;
      font-weight: normal;
    }
  }
}

:is(suggestsettings, modsettings) {
  .embed {
    position: relative;

    input:not(.reaction *) {
      background: none;
      font-weight: 600;
      color: $white;
    }

    > .author {
      left: 2em;
      margin-top: 1vh;

      &::before {
        content: '';
        height: 1.72em;
        width: 1.72em;
        border-radius: 50%;
        position: absolute;
        left: -2em;
        top: -0.25em;
        // background-image: url("https://discordapp.com/assets/#{nth($DiscordPicsList, random(5))}.png");
        background: DiscordPic();
      }
    }
  }

  .color {
    left: -2vh;
  }

  input.duration,
  input.reasonFrom {
    @include wdth;
    @include dashedInput;
  }

  .content {
    > i {
      font-style: normal;
      display: block;
    }

    > * {
      margin-top: .57em;
    }
  }
}

modsettings {
  @include blockElement;
  padding-bottom: 3rem;
  position: relative;

  h6:first-child {
    display: inline-block;
    font-size: 1.5rem;
    margin-bottom: 3vh;
  }

  .role {
    position: relative;
    background: $color4;
    color: var(--clr,$color7);
    display: inline-block;
    margin-right: 1ch;
    padding: .1em 1ch;
    white-space: nowrap;
    border-radius: .2em;
    font-size: 1rem;
    cursor: default;
    height: 2vh;
    margin: .3vh 0 3.7vh;

    &:hover {
      background: mix($color4, $blue, 90%);
    }
  }

  .embed {
    margin-top: .7vh;
    gap: .4em;
    width: min(520px,50%);
  }

  .messagefrom {
    @include wdth;
    @include dashedInput;
    background: none;
    margin: .7vh 0 0 .25vh;
    display: block;
  }

  .by,
  .until {
    @include wdth;
    @include dashedInput;
    padding: 0 .2ch;
    font-size: 1em;
  }

  .hasbeen {
    @include wdth;
    @include dashedInput;
    margin: -.2em 0 !important;
    padding: 0 .2ch;
    height: unset;
    font-size: 1em;
  }
  // .author > div {display: inline-block;}
  .toggle {
    float: none;
    margin: .7vh 0 3vh;
  }

  .banmessage {
    min-height: 4em;
    height: calc(1px * var(--height, 4em));
    width: min(520px, 50%);
    background-color: $color3;
    border-radius: .5vh;
    padding: .3em 2ch;
    color: $color7;
    font-size: clamp(0.75rem, 16px, 1.25rem);
    line-height: 1.2;
    font-family: Whitney, 'Helvetica Neue', Helvetica, Arial, sans-serif;
    resize: none;
    transition: background-color .3s ease-out .1s;
    margin-bottom: 3vh;

    &:is(:hover, :focus) {
      background-color: lighten($color3, 2%);
    }
  }
}

.comsettings {
  width: 50%;
  font-size: 1rem;
  @for $i from 1 through 8 {
    &[shw="#{$i}"] {
      > :nth-child(#{$i}) {
        display: block;
      }

      +.scrollbar > :nth-child(#{$i+1}) {
        background-color: lighten($color3,4%);
        transform: scale(1.1);
      }
    }
  }
}

.comsetting {
  display: none;
  position: relative;
  background: $color3;
  color: $color7;
  border-radius: .5vh;
  margin-top: 4em;
  padding: .3em 2ch;
  transition: background-color .5s ease-out;
  // transition-property: background-color, opacity;
  &::before {
    color: $yellowish;
  }

  &::after {
    content: attr(shw);
    color: $white;
    position: absolute;
    top: -1.2em;
    left: 0;
    // font-size: 1rem;
    font-weight: bold;
    text-transform: capitalize;
  }

  > .command {
    @include dashedInput;
    background: none;
    font-weight: 600;
    margin: 0 !important;
  }

  > .doc {
    position: absolute;
    right: 0;
    height: 1.2em;
    top: 0;
    background: inherit;
    border-radius: .5vh .5vh 0 0;
    padding: .3em;
    color: $color6;
    transition: .5s ease-out;
    transition-property: top, color;
  }
  // &:is(:hover, :focus-within) {background-color: lighten($color3,2%);> .doc {top: -1.2em; color: $color7;}}
  > .roleSelect {
    background: darken($color3, 2%);
    margin-bottom: 1rem;
  }

  > .txt {
    width: fit-content;
    max-width: 90%;
    background: darken($color3, 2%);
    margin-bottom: 1rem;
    padding: .4em;
    border-radius: .5vh;

    > input {
      background: none;
      padding: 0 .2ch;
      font-size: 1em;
    }

    > .txtinput {
      @include wdth;
      @include dashedInput;
    }
  }
  // .argel {
  //   @include ttlPopup
  // }
}

.scrollbar {
  // .comsettings +  // Add if a new  .scrollbar  adds
  border-radius: .5vh;
  overflow: hidden;
  width: 50%;
  display: flex;
  justify-content: space-between;
  margin-top: .7vh;

  > * {
    width: 20%;
    // border-radius: 1.25rem;
    // width: 2.5rem;
    // min-width: 2rem;
    height: 2.5rem;
    font-size: .8rem;
    background: $color3;
    color: $color7;
    cursor: pointer;
    display: grid;
    place-content: center;
    text-align: center;
    transition: .5s ease-out .1s;
    transition-property: background-color, transform;

    &:is(:hover, :focus-within):not(.scrollarrow) {
      background-color: lighten($color3,4%);
      transform: scale(1.1);
      z-index: 2;
    }
  }

  > .scrollarrow {
    background: $color3 center/70% url("/src/icon/arrow") no-repeat;

    &:first-child {
      transform: scaleX(-1);
    }
  }
}
// .comsettings,
// .scrollbar {
//   display: none;
// }

.hide {
  opacity: 0;
  position: fixed;
  top: -99vw;
  font-size: .875rem;
}

suggestion {
  border: .3rem #0000 solid;
  border-top-color: var(--clr, $DCgray);
  transition: .3s ease-out .2s;
  transition-property: border-color, background-color,transform;
  font-size: 1rem;
  cursor: pointer;

  > * {
    cursor: auto;
    width: fit-content;
  }

  &[selected] {
    transform: scale(1.1);
  }

  &:hover {
    background-color: $color2;

    &::before {
      color: $color6;
    }
  }

  &::before {
    content: attr(idx);
    position: absolute;
    right: 1ch;
    color: lighten($color3, 5%);
    transition: color .3s ease-out;
    font-weight: 700;
  }

  &:is(:hover, [selected]) {
    border-color: var(--clr, $DCgray);

    :is(.author, .from) {
      @include TagNmHov;
    }

    > .answer::before {
      color: $color6;
    }
  }

  :is(.author, .from) {
    @include TagNmDef;
    font-size: .75rem;
    position: absolute;
    // &::before {content: ""; background: url(--avtr);width: 1em; height: 1em; position: absolute;}
  }

  > .content {
    margin: 1em 0 0 .3ch;
  }

  > .author {
    margin-left: .3ch;
    left: .6ch;
  }

  > .answer::before {
    content: 'Reason from: ';
    color: $color7;
    font-size: .75rem;
    position: absolute;
    transition: color .3s ease-out;
  }

  .reason {
    padding-top: 1em;
    margin-top: .5em;
  }

  .from {
    left: 12.5ch;
  }
  // &:hover > .reply {  display: block;  opacity: 1;}.reply {  display: none;  opacity: 0;  transition: opacity .3s ease-out;  position: absolute;  height: 2em;  width: 2em;  bottom: -2.35em;  right: 0;  background: inherit;  border-radius: 0 0 .4rem .4rem;  border: inherit;  border-top: none;  z-index: 2;  cursor: pointer;  &::before {    content: "";    background: no-repeat center/2em url("/src/icon/reply");    display: block;    width: 2em;    height: 2em;    position: absolute;  }}
}

suggestions {
  @include blockElement;
  @include sorterSelect;
  position: relative;
  border-radius: .6rem .6rem 0 0;
  margin-bottom: 0;
}

.sorter {
  font-size: 1rem;
  height: 2em;
  width: 11ch;
  margin-bottom: -2em;
  position: relative;
  top: 1.1em;
  left: calc(100% - 12ch);
  background: $color3;
  z-index: 1;
  padding: 0;
}

#suggestions {
  > .replybox {
    position: relative;
    background-color: $color2;
    min-height: 3rem;
    height: fit-content;
    width: 97.5%;
    margin: 0 0 1rem;
    padding: 0 2% 1rem;
    font-size: 1.2rem;
    border-radius: 0 0 .6rem .6rem;

    > textarea {
      min-height: 3em;
      height: calc(1px * var(--height));
      width: 100%;
      margin-top: 4ch;
      background-color: $color3;
      padding: 1em;
      border-radius: .6rem;
      resize: none;
      font-size: clamp(0.75rem,16px,1.25rem);
      color: $color7;
      line-height: 1.2;
      border-bottom: var(--color) .3rem solid;
      box-shadow: inset 0 -2em 6em -6em var(--color);
      transition: background-color .3s ease-out .1s;

      &:is(:hover, :focus) {
        background-color: lighten($color3, 2%);
      }
    }

    > .buttons {
      position: absolute;
      top: 1ch;
      width: 6ch;
      height: 1.5ch;
      display: flex;
      justify-content: space-between;
      background: $color2;
      border-radius: .75ch;

      &::before {
        content: '';
        height: 1.1ch;
        width: 1.1ch;
        border-radius: 50%;
        position: absolute;
        top: 0;
        left: calc(var(--left) * 2.25ch);
        transform: scale(1.2);
        border: $color7 .2ch solid;
        transition: left .5s ease-out;
        text-transform: capitalize;
      }

      &::after {
        content: attr(status);
        position: absolute;
        color: $color6;
        left: 7.5ch;
        top: -.15em;
        font-size: 1.5ch;
      }

      > div {
        height: 1.5ch;
        width: 1.5ch;
        border-radius: 50%;
        background: var(--clr);
        cursor: pointer;
        z-index: 1;
        // transition: transform .5s ease .5s; &:hover {transform: scale(1.2);}
      }
    }

    > .send {
      position: absolute;
      background: no-repeat center/2em url('/src/icon/reply');
      width: 2em;
      height: 2em;
      top: -.3em;
      right: 2%;
      cursor: pointer;
    }
  }
  // > .order {
  //   &::before {--o: 1;}
  //   &::after {--o: 2;}
  //   --o: 0;
  //   position: relative;
  //   top: calc(3.375rem + var(--o) * .875rem);
  //   &,&::after,&::before {
  //     content: "";
  //     display: block;
  //     height: .3rem;
  //     width: 1.3rem;
  //     position: absolute;
  //     top: calc(.375rem + var(--o) * .875rem);
  //     border: $color6 .1rem solid;
  //   }}
}

[status^=a]+textarea {
  --color: var(--approve);
}

[status^=d]+textarea {
  --color: var(--deny);
}

[status^=c]+textarea {
  --color: var(--consider);
}

[columns] > suggestions {
  flex-direction: column;
}

transcripts {
  @include blockElement;
  @include columnList
}

transcript {
  border-radius: .4rem;
  background-color: $color3;
  position: relative;
  padding-top: 3rem;
  overflow: hidden;

  &:not([show]):hover {
    background-color: $color4;
  }

  &[show] {
    height: fit-content;

    > msg {
      display: block;
    }
  }

  > .name {
    position: absolute;
    top: .2em;
    // width: 100%;
    width: calc(100% - 12ch - 2rem - 1.2em); //fixme: fÃ¶rkorta
    height: 2.7rem;
    left: 1.2em;
    cursor: pointer;

    &::before {
      content: '#';
      display: block;
      position: absolute;
      color: $color6;
      width: 1.5rem;
      height: 1.5rem;
      font-family: monospace;
      left: -1.8rem;
      font-size: 1.3em;
      top: -.1em;
      text-align: center;
    }
  }

  > .time {
    font-size: .75rem;
    // height: 3rem - .375rem;
    position: absolute;
    right: 3ch;
    top: .25em;
    display: flex;
    justify-content: space-between;
    gap: .2em;
    flex-direction: column;

    i {
      font-style: normal;
    }

    > span {
      display: flex;
      justify-content: space-between;
    }

    i:last-child {
      margin-left: 1ch;
    }
    // > .expires {
    //   align-items: center;
    //
    //   > i {
    //     white-space: nowrap;
    //   }
    // }
    // .extend {
    //   // font-size = .75rem;
    //   border-radius: .4em;
    //   display: inline-block;
    //   overflow: hidden;
    //   cursor: pointer;
    //   padding: .1em 1ch;
    //   width: fit-content;
    //   text-align: center;
    //   border: $blue .15em solid;
    //
    //   &:hover {
    //     border-color: lighten($blue, 5%);
    //     background: mix($color3, $blue, 80%);
    //   }
    //
    //   &::before {
    //     content: 'EXTEND';
    //   }
    // }
  }

  > msg {
    display: none;
    font-size: 1rem;
    position: relative;
    padding-left: 4.5em;
    line-height: 1.375em;
    margin-top: 1.0625em;
    min-height: 2.75em;

    > .time {
      font-size: .75em;
      // display: inline-block;
      color: $color6;
      cursor: default;
      // margin-left: .5em;
    }

    > .content {
      color: $color8;
    }

    &:hover {
      > .user {
        @include TagNmHov;
        // color: $color7;animation: CtD .3s ease-out;user-select: all;width: unset;&::after {opacity: 0;position: fixed;top: -99vw;font-size: .875rem;}
      }
    }

    a {
      color: mix($blue,$color3, 80%) !important;
    }
  }

  .user {
    display: inline-block;
    width: 0;
    white-space: nowrap;
    // position: relative;color: #0000;&::after {content: attr(nm);color: var(--uclr, $white);left: 0;top: 0;position: absolute;}
    @include TagNmDef;

    &::before {
      content: '';
      position: absolute;
      display: block;
      background: center / contain no-repeat var(--avtr);
      border-radius: 50%;
      width: 2.5em;
      height: 2.5em;
      left: -3.5em;
    }
  }

  .embed {
    background-color: $color2;
    max-width: min(520px,80%);
    width: fit-content;
  }

  .open {
    position: absolute;
    right: 12ch;
    top: .5rem;
    width: 2rem;
    height: 2rem;
    background: no-repeat center/100% url('/src/icon/open');
    filter: brightness(99);
    cursor: pointer;
  }
}

modlogs {
  @include blockElement;
  @include columnList;
  @include sorterSelect;
  position: relative;
}

modlog {
  border-radius: 0 .4rem .4rem 0;
  background-color: $color3;
  position: relative;
  border-left: solid .2ch;
  display: grid;
  // grid-template-columns: 1.3fr 1fr;
  grid-template-columns: 2fr 1fr 13ch;
  padding: .5rem .5ch;

  &:hover {
    background-color: $color4;
  }
  // &::before {content: attr(class);display: inline-block;}
  > .type {
    display: inline-block;
    grid-column: 1 / 3;
    text-transform: capitalize;
    color: $accent1;
    font-weight: bolder;
  }

  > .date {
    color: $color6;
    font-size: .8rem;
    display: inline-block;
    position: absolute;
    top: 1em;
    right: 0;
    width: 14ch;
  }

  :is(.duration, .member, .reason, .staff):before {
    margin-right: .5ch;
  }

  :is(.member, .staff) {
    @include TagNmDef;

    &:hover {
      @include TagNmHov;
    }

    &:not([nm]) {
      color: $color7;
    }

    &::before {
      color: $white;
      background: no-repeat right/2ch var(--avtr);
      display: inline-block;
    }
  }

  .staff {
    grid-column: 2;

    &::before {
      content: 'Staff:';
      // width: 6.55ch;
      width: 6.15ch;
    }

    &::after {
      left: 6.65ch;
      // left: 7.05ch;
    }
  }

  .member {
    grid-column: 1;
    grid-row: 2;

    &::before {
      content: 'Member:';
      // width: 9.5ch;
      width: 9.1ch;
    }

    &::after {
      left: 9.6ch;
      // left: 10ch;
    }
  }

  .reason {
    grid-column: 1;
    grid-row: 3;
    margin-left: 7.6ch;

    &::before {
      content: 'Reason:';
      margin-left: -7.6ch;
    }

    &[unspecified]::after {
      font-style: italic;
      color: $color7;
      content: 'Unspecified';
    }
  }

  .duration {
    grid-column: 2;

    &::before {
      content: 'Duration:';
    }
  }

  &:is(.mute, .warn) {
    border-color: $DCyellow;
  }

  &:is(.ban, .kick) {
    border-color: $DCred;
    // > .type {color: mix($accent2,$DCred,75%);}
  }

  &:is(.unban, .unmute) {
    border-color: $DCgreen;
    // > .type {color: mix($accent2,$DCgreen,75%);}
  }

  > remove {
    grid-column: 3;
    // margin: 0;
    opacity: 0;
  }

  &:hover > remove {
    opacity: 1;
  }
}

.more {
  background-color: $color3;
  align-self: center;
  border-radius: .4rem;
  padding: .5rem .5ch;
  margin: -.5rem;
  cursor: pointer;

  &:hover {
    background-color: $color4;
  }

  &:not(modlog~*) {
    display: none;
  }
}

#moderation > .popup {
  display: none;
  // background: $color5;
  position: relative;
  height: 2rem;
  width: 27ch;
  border-radius: .5vh;
  margin-bottom: -2rem;
  z-index: 2;
  overflow: hidden;
  top: 3rem;
  float: right;
  border: .1rem $blue solid;

  &[shw] {
    display: block;
  }

  > input,
  > div {
    position: absolute;
    bottom: 0;
    width: 50%;
    height: 100%;
    margin: 0;
    border-radius: 0;
  }

  > input {
    left: 0;
    width: 21ch;
    font-size: 1rem;
    transition: background-color .1s ease-out;

    &[err] {
      background-color: mix($color5, $red, 90%);
    }
  }

  > div {
    right: 0;
    background: $accent1;
    cursor: pointer;
    width: 6ch;
    line-height: 2;
    text-align: center;

    &:hover {
      background: $accent2;
    }

    &::before {
      content: 'Filter';
    }
  }
}

reaction {
  @include blockElement;
  display: block;

  rules {
    width: 100%;
  }

  create,
  rule {
    font-size: 1.5rem;
    margin-top: 1%;
    padding: .3rem .3ch;
    border-radius: .4rem;
    background: $color3;
    height: fit-content;
    width: unset;
  }

  rule {
    &:not([idinput="4"], [idinput="5"]) > input.id {
      display: none;
      width: 21ch;
    }

    &[idinput] .filter {
      width: 15ch;
    }
  }

  input,
  select {
    margin-bottom: 0 !important;
    margin-right: 2ch;
    background-color: darken($color3, 2%) !important;
  }

  remove {
    margin-right: 2rem;
  }

  .set,
  remove {
    // font-size: 1.5rem;
  }
}

.multiple {
  margin: .5em 0 1em;
  font-size: 1rem;
  height: fit-content;

  > div {
    padding: .1em 2ch .1em 1ch;
    position: relative;
    background: $color4;
    color: var(--clr,$color7);
    display: inline-block;
    margin: .1em 1ch;
    white-space: nowrap;
    border-radius: .2em;
    height: 1.5em;
    top: -0.5em;
    cursor: pointer;
    // vertical-align: top;
    &:hover {
      background: mix($color4, $red, 90%);
    }

    &:not(.add) {
      @include exOnHover;
    }

    &[unknown] {
      color: $color6;
    }
  }

  .add {
    vertical-align: top;
    padding: .1em 2ch;
    width: 0;

    &:hover {
      background: mix($color4, $blue, 90%);
    }

    &::after {
      content: '+';
      font-size: 2em;
      text-align: center;
      position: absolute;
      inset: 0;
      top: -0.125em;
      // height: 50%;
    }

    > * {
      position: relative;
      border-radius: .6rem;
      border-top-left-radius: 0;
      left: 2ch;
      top: .2em;
      z-index: 1;
      opacity: 0;
      pointer-events: none;
    }

    &[show] > :not(.emojiSelector),
    > [show] {
      opacity: 1;
      pointer-events: all;
    }
  }
}

body > transcripts {
  /* only on /Guild/_/transcript/_  */
  background: 0;
  padding: 0;
  position: fixed;
  top: 5vh;
}

body > * > transcript {
  /* only on /Guild/_/transcript/_  */
  background: 0;
  overflow-y: scroll;
  max-height: calc(95vh - 3.5rem);

  > div {
    position: fixed !important;
    margin-top: 7vh;
  }

  > .time {
    gap: 1em;
    top: 3em;
    right: 9ch;
    font-size: 1rem;
  }
}

header > .back {
  /* only on /Guild/_/transcript/_  */
  width: 4.5vh;
  background: no-repeat center/100% url('/src/icon/reply');
  transform: scaleX(-1);
  margin-left: 2%;
}

automodsettings {
  @include blockElement;
  display: flex;
  flex-wrap: wrap;
  // padding: 0 2%;
  gap: 2.5%;

  label:not(:first-of-type) {
    float: none;
    margin: .7vh 0 3vh;
  }

  > .set {
    margin: 1rem 0 0 calc(100% - 6rem);
  }
}

automod {
  min-width: 27rem;
  flex: 1;
  margin-top: 1%;
  padding: .3rem .3ch;
  border-radius: .4rem;
  background-color: $color3;
  position: relative;
  height: fit-content;

  > h6:first-child {
    font-size: 1.5rem;
    display: inline-block;
  }

  > .multiple > .add > *,
  > .reason {
    background-color: $color4;
  }

  > .reason {
    width: 100%;
  }
  // &:not([reason]) > :is(.reason, h6:last-of-type) {
  //   display: none;
  // }
  input[type=range] {
    width: 38%;

    &::after {
      white-space: nowrap;
    }
  }
}
// .tempautomod,
// automodsettings {
//   display: none !important;
// }